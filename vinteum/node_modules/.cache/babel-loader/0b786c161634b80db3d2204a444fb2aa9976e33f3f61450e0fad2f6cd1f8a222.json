{"ast":null,"code":"var _jsxFileName = \"/home/yori/us/react/vinteum/src/App.js\",\n  _s = $RefreshSig$();\n//TODO \n// resolver soma\n// colocar as cartas em arrays\n// botao de pegar nova carta\n// botao de finalizar a partida\n// usar emJogo e tem21\n\n// TODO OPTIONAL\n// sistema de apostas\n// dealer pode pegar nova carta\n// cartas representam as letras quando pertinente\n\nimport './App.css';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [emJogo, setEmJogo] = useState(false);\n\n  // const [primeiraCarta,setPrimeiraCarta] = useState(0);\n  // const [segundaCarta,setSegundaCarta] = useState(0);\n  // const [somaCartas,setSomaCartas] = useState(0);\n  const [cartas, setCartas] = useState([]);\n  const [somaArray, setSomaArray] = useState(0);\n\n  // const [primeiraCartaDealer,setPrimeiraCartaDealer] = useState(0);\n  // const [segundaCartaDealer,setSegundaCartaDealer] = useState(0);\n  // const [somaCartasDealer,setSomaCartasDealer] = useState(0);\n  const [cartasDealer, setCartasDealer] = useState([]);\n  const [somaArrayDealer, setSomaArrayDealer] = useState(0);\n  const [resultado, setResultado] = useState(\"\");\n  const [final, setFinal] = useState(false);\n  useEffect(() => {\n    console.log(\"CHANGED\");\n    // console.log(\"Suas cartas hook\",cartas)\n    // console.log(\"Resultado\",resultado)\n    setCartas(cartas);\n    setCartasDealer(cartasDealer);\n    setResultado(resultado);\n    setSomaArray(cartas.reduce((accumulator, currentValue) => accumulator + currentValue, 0));\n    // setSomaArray(somaArray);\n    setFinal(final);\n    console.log(\"final\", final);\n    console.log(\"resultado\", resultado);\n  }, [cartas, cartasDealer, resultado, somaArray, final]);\n  const iniciarPartida = () => {\n    setCartas([randomCard(), randomCard()]);\n    setCartasDealer([randomCard(), randomCard()]);\n    // setPrimeiraCarta(randomCard());\n    // setSegundaCarta(randomCard());\n    // console.log(\"cartas:\",cartas)\n\n    // setPrimeiraCartaDealer(randomCard());\n    // setSegundaCartaDealer(randomCard());\n\n    setEmJogo(true);\n    setResultado(\"\");\n    // somarCartas();\n  };\n\n  const finalizar = () => {\n    // somarCartas();\n    // console.log(\"finalizar function\",somaCartas,somaCartasDealer)\n    setFinal(true);\n    compararSomas();\n  };\n  const pegarCarta = () => {\n    let novaCarta = randomCard();\n    // console.log(\"novaCarta:\",novaCarta)\n    let novaArray = [...cartas, novaCarta];\n    setCartas(novaArray);\n    // console.log(\"novaArray:\",novaArray)\n\n    let somaArrayTemp = 0;\n    for (let i = 0; i < cartas.length; i++) {\n      somaArrayTemp += cartas[i];\n    }\n    // console.log(\"AASDDSA\",somaArrayTemp);\n    // setSomaArray(somaArrayTemp);\n    // console.log(\"somaarrayda\",somaArray)\n  };\n\n  const compararSomas = () => {\n    // As somas ficam = 0\n    let somaArray = 0;\n    let somaArrayDealer = 0;\n    for (let i = 0; i < cartas.length; i++) {\n      somaArray += cartas[i];\n    }\n    for (let i = 0; i < cartasDealer.length; i++) {\n      somaArrayDealer += cartasDealer[i];\n    }\n    // console.log(\"novo soma array dealer\",somaArrayDealer)\n    // let soma=primeiraCarta+segundaCarta;\n    // let somaDealer=primeiraCartaDealer+segundaCartaDealer;\n\n    if (final === true) {\n      if (somaArray < 21) {\n        if (somaArray > somaArrayDealer) {\n          setResultado(\"Ganhou\");\n        } else {\n          setResultado(\"Perdeu\");\n        }\n      } else if (somaArray === 21 && somaArrayDealer < somaArray) {\n        setResultado(\"VINTE UM\");\n      } else if (somaArray === 21 && somaArrayDealer === 21) {\n        setResultado(\"Empate\");\n      }\n    }\n    if (final === false && somaArray > 21) {\n      setResultado(\"Perdeu, ultrapassou 21\");\n    }\n    // console.log(\"Comparar\")\n  };\n\n  // const somarCartas = () =>{\n  // soma nao recebe valor\n  // somente depois de apertar 2 vezes ele pega o valor\n  // mas e o valor anterior\n  // setSomaCartas(primeiraCarta+segundaCarta);\n  // setSomaCartasDealer(primeiraCartaDealer+segundaCartaDealer);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: iniciarPartida,\n      children: \"Iniciar jogo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: finalizar,\n      children: \"Finalizar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: pegarCarta,\n      children: \"Pegar mais uma carta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CartasJogador, {\n      cartas: cartas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CartasDealer, {\n      primeira: cartasDealer[0],\n      segunda: cartasDealer[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), resultado !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: resultado\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jcyxXDcbKVqy8dd91ntJqdCTY3g=\");\n_c = App;\nconst CartasJogador = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Suas Cartas: \", props.cartas.join(\" \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n_c2 = CartasJogador;\nconst CartasDealer = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cartas do dealer: \", props.primeira, \" \", props.segunda]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n_c3 = CartasDealer;\nfunction randomCard() {\n  let random = Math.floor(Math.random() * 13) + 1;\n  if (random > 10) {\n    return 10;\n  } else if (random === 1) {\n    return 11;\n  } else {\n    return random;\n  }\n}\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"CartasJogador\");\n$RefreshReg$(_c3, \"CartasDealer\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","emJogo","setEmJogo","cartas","setCartas","somaArray","setSomaArray","cartasDealer","setCartasDealer","somaArrayDealer","setSomaArrayDealer","resultado","setResultado","final","setFinal","console","log","reduce","accumulator","currentValue","iniciarPartida","randomCard","finalizar","compararSomas","pegarCarta","novaCarta","novaArray","somaArrayTemp","i","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","CartasJogador","CartasDealer","primeira","segunda","_c","props","join","_c2","_c3","random","Math","floor","$RefreshReg$"],"sources":["/home/yori/us/react/vinteum/src/App.js"],"sourcesContent":["//TODO \n// resolver soma\n// colocar as cartas em arrays\n// botao de pegar nova carta\n// botao de finalizar a partida\n// usar emJogo e tem21\n\n// TODO OPTIONAL\n// sistema de apostas\n// dealer pode pegar nova carta\n// cartas representam as letras quando pertinente\n\nimport './App.css';\nimport {useState} from 'react';\nimport {useEffect} from 'react';\n\nfunction App() {\nconst [emJogo,setEmJogo] = useState(false);\n\n// const [primeiraCarta,setPrimeiraCarta] = useState(0);\n// const [segundaCarta,setSegundaCarta] = useState(0);\n// const [somaCartas,setSomaCartas] = useState(0);\nconst [cartas,setCartas] = useState([]);\nconst [somaArray,setSomaArray] = useState(0)\n\n// const [primeiraCartaDealer,setPrimeiraCartaDealer] = useState(0);\n// const [segundaCartaDealer,setSegundaCartaDealer] = useState(0);\n// const [somaCartasDealer,setSomaCartasDealer] = useState(0);\nconst [cartasDealer,setCartasDealer] = useState([]);\nconst [somaArrayDealer,setSomaArrayDealer] = useState(0)\n\nconst [resultado,setResultado] = useState(\"\");\nconst [final,setFinal] = useState(false);\n\n    useEffect(() =>{\n        console.log(\"CHANGED\")\n        // console.log(\"Suas cartas hook\",cartas)\n        // console.log(\"Resultado\",resultado)\n        setCartas(cartas);\n        setCartasDealer(cartasDealer);\n        setResultado(resultado);\n        setSomaArray(cartas.reduce((accumulator, currentValue) => accumulator + currentValue, 0));\n        // setSomaArray(somaArray);\n        setFinal(final)\n        console.log(\"final\",final);\n        console.log(\"resultado\",resultado);\n    },[cartas,cartasDealer,resultado,somaArray,final]);\n\n    const iniciarPartida = () =>{\n        setCartas([randomCard(),randomCard()])\n        setCartasDealer([randomCard(),randomCard()])\n        // setPrimeiraCarta(randomCard());\n        // setSegundaCarta(randomCard());\n        // console.log(\"cartas:\",cartas)\n        \n        // setPrimeiraCartaDealer(randomCard());\n        // setSegundaCartaDealer(randomCard());\n\n        setEmJogo(true);\n        setResultado(\"\");\n        // somarCartas();\n    }\n\n    const finalizar = () =>{\n        // somarCartas();\n        // console.log(\"finalizar function\",somaCartas,somaCartasDealer)\n        setFinal(true);\n        compararSomas();\n    }\n\n\n    const pegarCarta = () =>{\n        let novaCarta = randomCard();\n        // console.log(\"novaCarta:\",novaCarta)\n        let novaArray = [...cartas,novaCarta];\n        setCartas(novaArray);\n        // console.log(\"novaArray:\",novaArray)\n        \n        let somaArrayTemp = 0\n\n        for(let i=0;i<cartas.length;i++){\n            somaArrayTemp += cartas[i];\n        }\n        // console.log(\"AASDDSA\",somaArrayTemp);\n        // setSomaArray(somaArrayTemp);\n        // console.log(\"somaarrayda\",somaArray)\n\n    }\n\n    const compararSomas = () =>{\n        // As somas ficam = 0\n        let somaArray = 0\n        let somaArrayDealer = 0\n        for(let i=0;i<cartas.length;i++){\n            somaArray += cartas[i];\n\n        }\n\n        for(let i=0;i<cartasDealer.length;i++){\n            somaArrayDealer += cartasDealer[i];\n        }\n        // console.log(\"novo soma array dealer\",somaArrayDealer)\n        // let soma=primeiraCarta+segundaCarta;\n        // let somaDealer=primeiraCartaDealer+segundaCartaDealer;\n\n        if(final === true){\n            if(somaArray < 21){\n                if(somaArray>somaArrayDealer){\n                    setResultado(\"Ganhou\")\n                }\n                else{\n                    setResultado(\"Perdeu\")\n                }\n            }\n            else if(somaArray === 21 && somaArrayDealer < somaArray){\n                setResultado(\"VINTE UM\")\n            }\n            else if(somaArray === 21 && somaArrayDealer === 21){\n                setResultado(\"Empate\");\n            }\n        }\n        if(final === false && somaArray > 21){\n            setResultado(\"Perdeu, ultrapassou 21\")\n        }\n        // console.log(\"Comparar\")\n    }\n\n    // const somarCartas = () =>{\n        // soma nao recebe valor\n        // somente depois de apertar 2 vezes ele pega o valor\n        // mas e o valor anterior\n        // setSomaCartas(primeiraCarta+segundaCarta);\n        // setSomaCartasDealer(primeiraCartaDealer+segundaCartaDealer);\n    // }\n\n  return (\n    <div className=\"App\">\n      <button onClick={iniciarPartida}>Iniciar jogo</button>\n      <button onClick={finalizar}>Finalizar</button>\n      <button onClick={pegarCarta}>Pegar mais uma carta</button>\n      <br/>\n      <CartasJogador cartas={cartas}/>\n      <br/>\n      <CartasDealer primeira={cartasDealer[0]} segunda={cartasDealer[1]} />\n      <br/>\n      {resultado !== \"\" && <p>{resultado}</p>}\n    </div>\n  );\n\n}\n\nconst CartasJogador = (props) => {\n    return(\n        <div>\n        <p>Suas Cartas: {props.cartas.join(\" \")}</p>\n        </div>\n    );\n};\n\nconst CartasDealer = (props) => {\n    return(\n        <div>\n        <p>Cartas do dealer: {props.primeira} {props.segunda}</p>\n        </div>\n    );\n};\n\nfunction randomCard(){\n    let random = Math.floor(Math.random() * 13) + 1\n    if (random > 10){\n        return 10\n    }\n\n    else if (random === 1){\n        return 11\n    }\n\n    else {\n        return random \n    }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}