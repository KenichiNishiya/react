{"ast":null,"code":"var _jsxFileName = \"/home/yori/us/react/useeffecthook/src/Text.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Text = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  // Whenever the Text component re-renders, the useEffect will run\n  // Since we are updating the input text, it also run it\n  useEffect(() => {\n    console.log(\"Mounted\");\n    return () => {\n      console.log(\"Unmounted\");\n    };\n  });\n  // You can ommit the ,[text] if you want the effect to run everytime it is updated\n  // If you want to run only when mounting, leave the array empty [].\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: event => {\n        setText(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n_s(Text, \"+cmIci5wzo7qngZMHfXB0KTM23Y=\");\n_c = Text;\nvar _c;\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Text","_s","text","setText","console","log","children","onChange","event","target","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yori/us/react/useeffecthook/src/Text.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {useState} from 'react';\n\nexport const Text = () =>{\n    const [text,setText] = useState(\"\");\n    // Whenever the Text component re-renders, the useEffect will run\n    // Since we are updating the input text, it also run it\n    useEffect(() =>{\n        console.log(\"Mounted\");\n        return () =>{\n            console.log(\"Unmounted\");\n        };\n    });\n    // You can ommit the ,[text] if you want the effect to run everytime it is updated\n    // If you want to run only when mounting, leave the array empty [].\n    return(\n        <div>\n            <input onChange={(event) =>{setText(event.target.value)}}/>\n            <h1>{text}</h1>\n        </div>\n    );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACnC;EACA;EACAD,SAAS,CAAC,MAAK;IACXQ,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtB,OAAO,MAAK;MACRD,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC5B,CAAC;EACL,CAAC,CAAC;EACF;EACA;EACA,oBACIN,OAAA;IAAAO,QAAA,gBACIP,OAAA;MAAOQ,QAAQ,EAAGC,KAAK,IAAI;QAACL,OAAO,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAAA;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC3Df,OAAA;MAAAO,QAAA,EAAKJ;IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd,CAAC;AAAAb,EAAA,CAlBYD,IAAI;AAAAe,EAAA,GAAJf,IAAI;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}